---
import Layout from "@src/components/Layout.astro";
import ListGrid from "@src/components/ListGrid.astro";
import NextPrev from "@src/components/NextPrev.astro";
import TODO from "@src/components/TODO.astro";

import { db, MusicItem, Tag, eq, gt, lt, and, isNull, NOW, Article, MusicItemArticle, MusicItemTag } from "astro:db";
import { Debug } from "astro:components";

let statusMessage;

const currentUser = Astro.locals.user;

if (!currentUser) {
  return Astro.redirect("/auth/login/");
}

const musicItemIdStr = Astro.params.musicItemId;
const musicItemId = parseInt(musicItemIdStr, 10);

const [musicItemBeforeUpdating] = await db
  .select()
  .from(MusicItem)
  .where(
    and(
      eq(MusicItem.id, musicItemId),
      eq(MusicItem.userId, currentUser.id),
    )
  );

if (!musicItemBeforeUpdating) {
  return new Response("Could not find music item", {status: 404});
}


if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const formAction = formData.get("form-action");
  const id = musicItemBeforeUpdating.id;

  const returnUrlParam = formData.get("return-to-url");
  const returnUrl = returnUrlParam && new URL(returnUrlParam, Astro.url.origin);

  const newStatusForAction = {
    archive: "archived",
    unarchive: "to_check_out",
    mark_as_checking_out: "checking_out",
    mark_as_to_check_out: "to_check_out",
  }[formAction];

  if (newStatusForAction) {
    await db
      .update(MusicItem)
      .set({
        status: newStatusForAction,
        statusChangedAt: NOW,
        statusChangedFrom: musicItemBeforeUpdating.status,
      })
      .where(
        and(
          eq(MusicItem.id, id),
          eq(MusicItem.userId, currentUser.id),
        )
      );
    statusMessage = `Music item marked as ${newStatusForAction}.`;
  } else if (formAction === "delete") {
    await db.delete(MusicItemArticle).where(eq(MusicItemArticle.musicItemId, id));
    await db
      .delete(MusicItem)
      .where(and(eq(MusicItem.id, id), eq(MusicItem.userId, currentUser.id)));
    statusMessage = "Music item deleted.";
    const redirectUrl = returnUrl || new URL("/music-items/", Astro.url.origin);
    redirectUrl.searchParams.set("message", statusMessage);
    return Astro.redirect(redirectUrl);
  } else if (formAction === "edit") {
    const editUrl = new URL(`/music-items/${id}/edit`, Astro.url.origin);
    if (returnUrl) {
      editUrl.searchParams.set("return-to-url", returnUrl);
    }
    return Astro.redirect(editUrl);
  } 
  if (returnUrl) {
    returnUrl.searchParams.set("message", statusMessage);
    return Astro.redirect(returnUrl);
  }
}

// Get all the musicItem data for the current user in order
const userMusicItems = await db
  .select()
  .from(MusicItem)
  .where(eq(MusicItem.userId, currentUser.id))
  .orderBy(MusicItem.id);

// TODO: it would be nice to use a 'join' to do this in the query above, but then I would need to 'aggregate' the results, because the results would be pairs of music items and music item tags.
const musicItemTags = await db
  .select()
  .from(MusicItemTag)
  .innerJoin(Tag, eq(Tag.slug, MusicItemTag.tagSlug))
  .where(eq(MusicItemTag.musicItemId, musicItemId));

// Find the index of the current musicItem
const currentMusicItemIndex = userMusicItems.findIndex(b => b.id === musicItemId);
const currentMusicItemNum = currentMusicItemIndex + 1;
const musicItem = userMusicItems[currentMusicItemIndex];

if (!musicItem) {
    return new Response("Could not find musicItem", {status: 404});
}

const totalMusicItems = userMusicItems.length;

const prevMusicItem = userMusicItems[currentMusicItemIndex - 1] || null;
const nextMusicItem = userMusicItems[currentMusicItemIndex + 1] || null;

const relatedArticles = await db.select({
  title: Article.title,
  id: Article.id,
  userId: Article.userId,
  sourceId: Article.sourceId,
}
).from(MusicItemArticle).innerJoin(Article, eq(MusicItemArticle.articleId, Article.id)).where(eq(MusicItemArticle.musicItemId, musicItemId));

const newArticleUrl = new URL("/articles/new", Astro.request.url);
newArticleUrl.searchParams.set("music-item-id", musicItem.id);
newArticleUrl.searchParams.set("return-to-url", Astro.url.pathname);

const googleUrl = new URL("https://www.google.com/search");
googleUrl.searchParams.set("q", `${musicItem.title} music review`);

const actions = [
  musicItem.status === "checking_out"
    ? { value: "mark_as_to_check_out", label: "Mark as to check out" }
    : { value: "mark_as_checking_out", label: "Mark as in rotation" },
  musicItem.status === "archived"
    ? { value: "unarchive", label: "Unarchive" }
    : { value: "archive", label: "Archive" },
  musicItem.status === "snoozed"
    ? { value: "unsnooze", label: "Unsnooze", confirm: "Are you sure you want to unsnooze this music item?" }
    : { value: "snooze", label: "Snooze" },
  {
    value: "edit",
    label: "Edit",
  },
  {
    value: "delete",
    label: "Delete",
    confirm: "Are you sure you want to delete this music item?",
  },
]

const breadcrumbs = [{ title: "ðŸŽµ Music items", url: "/music-items/" }];
---

<Layout title={musicItem.title} {breadcrumbs}>
  {statusMessage && <p>{statusMessage}</p>}

  <NextPrev
    prev={prevMusicItem && {url: `/music-items/${prevMusicItem.id}`, label: `Previous music item: ${prevMusicItem.title}`}}
    next={nextMusicItem && {url: `/music-items/${nextMusicItem.id}`, label: `Next music item: ${nextMusicItem.title}`}}
    current={`Music item ${currentMusicItemNum} of ${totalMusicItems}`}
  />

  <TODO>If the user is logged in to Spotify, and it's a Spotify URL, we should be able to look up preview URLs for the release</TODO>

  <TODO>We should be able to write what we think about the music here. Add comments with timestamps? Or just a single text box for 'what you think' about the music?</TODO>

  <h2>Actions</h2>

        <form method="POST" class="actions-group">
  <a href={musicItem.url} target="_blank" class="button">Open music item in new tab â†—</a>
          {actions.map((action: any) => (
            <button
              name="form-action"
              value={action.value}
              data-confirm-message={action.confirm || undefined}
            >
              {action.label}
            </button>
          ))}
        </form>

  <p><a href={musicItem.url} target="_blank">Open this music item in a new tab</a></p>

  <p><a href={googleUrl} target="_blank">Search Google for this music item</a></p>

  <h2>Related articles</h2>

  <TODO>If the article has a linked source, then we should allow the user to click through directly to the source?</TODO>

{relatedArticles.length > 0 && (
<ul>
{relatedArticles.map((article) => (
  <li><a href={`/articles/${article.id}`}>{article.title}</a></li>
))}
</ul>
)}

  <Debug {relatedArticles} />

  <p><a href={newArticleUrl}>Add new article for this music item</a></p>

  <TODO>One thing you can't do yet, is link an existing music item to an existing article. For example, say you've already saved a music item and then you realise that it shows up on a 'best of' list that you've already added. You can't link them together yet.</TODO>

  <NextPrev
    prev={prevMusicItem && {url: `/music-items/${prevMusicItem.id}`, label: `Previous music item: ${prevMusicItem.title}`}}
    next={nextMusicItem && {url: `/music-items/${nextMusicItem.id}`, label: `Next music item: ${nextMusicItem.title}`}}
    current={`Music item ${currentMusicItemNum} of ${totalMusicItems}`}
  />

<Debug {musicItem} />

  <h2>Tags</h2>
{musicItemTags.length > 0 && (
<ul class="pill-list">
{musicItemTags.map((musicItemTag) => (
  <li><a class="button" href={`/tags/${musicItemTag.Tag.slug}`}>{musicItemTag.Tag.name}</a></li>
))}
</ul>
)}
<Debug {musicItemTags} />

</Layout>

<style>
  .next-prev {
    display: flex;
    justify-content: space-between;
  }

  .next-prev a {
    display: block;
    padding: 1rem;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    text-decoration: none;
      }
</style>


<script>
  const buttonsWithConfirm = document.querySelectorAll(
    "button[data-confirm-message]",
  );

  buttonsWithConfirm.forEach((button) => {
    button.addEventListener("click", (event) => {
      if (!confirm(button.dataset.confirmMessage)) {
        event.preventDefault();
      }
    });
  });
</script>
