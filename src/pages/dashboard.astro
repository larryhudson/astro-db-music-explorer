---
import Layout from "@src/components/Layout.astro";
import TODO from "@src/components/TODO.astro";
import { formatDate } from "@src/utils/dates";
import { Debug } from "astro:components";
import { ne } from "astro:db";
import {
  db,
  FriendRequest,
  User,
  MusicItem,
  Article,
  Source,
  eq,
  not,
  and,
  or,
  isNull,
  isNotNull,
  inArray,
  desc,
} from "astro:db";

import { alias } from "drizzle-orm/sqlite-core";

const currentUser = Astro.locals.user;

if (!currentUser) {
  return Astro.redirect("/auth/login/");
}

const friendRequests = await db
  .select()
  .from(FriendRequest)
  .innerJoin(User, eq(FriendRequest.fromUserId, User.id))
  .where(
    and(
      eq(FriendRequest.toUserId, currentUser.id),
      isNull(FriendRequest.acceptedAt),
      isNull(FriendRequest.declinedAt),
    ),
  );

const friends = await db
  .select()
  .from(User)
  .innerJoin(
    FriendRequest,
    and(
      or(
        eq(FriendRequest.toUserId, User.id),
        eq(FriendRequest.fromUserId, User.id),
      ),
      isNotNull(FriendRequest.acceptedAt),
      or(
        eq(FriendRequest.toUserId, currentUser.id),
        eq(FriendRequest.fromUserId, currentUser.id),
      ),
    ),
  )
  .where(not(eq(User.id, currentUser.id)));

console.log({ friends });
const friendIds = friends.map((f) => f.User.id);

const OriginalMusicItem = alias(MusicItem, "OriginalMusicItem");
const OriginalMusicItemSaver = alias(User, "OriginalMusicItemSaver");

const feedItems = await db
  .select()
  .from(MusicItem)
  .innerJoin(User, eq(MusicItem.userId, User.id))
  .leftJoin(
    OriginalMusicItem,
    eq(MusicItem.originalMusicItemId, OriginalMusicItem.id),
  )
  .leftJoin(
    OriginalMusicItemSaver,
    eq(OriginalMusicItem.userId, OriginalMusicItemSaver.id),
  )
  .where(
    or(
      eq(MusicItem.userId, currentUser.id),
      friendIds.length > 0 && inArray(MusicItem.userId, friendIds),
    ),
  )
  .orderBy(desc(MusicItem.createdAt));

const mostRecentArticles = await db
  .select()
  .from(Article)
  .where(
    and(eq(Article.userId, currentUser.id), ne(Article.status, "archived")),
  )
  .orderBy(desc(Article.createdAt))
  .limit(5);

const mostRecentMusicItems = await db
  .select()
  .from(MusicItem)
  .where(
    and(eq(MusicItem.userId, currentUser.id), ne(MusicItem.status, "archived")),
  )
  .orderBy(desc(MusicItem.createdAt))
  .limit(5);

const mostRecentSources = await db
  .select()
  .from(Source)
  .where(eq(Source.userId, currentUser.id))
  .orderBy(desc(Source.createdAt))
  .limit(5);
---

<Layout title="🏠 Dashboard">
  <h2>Latest</h2>
  <h3>💬 Articles</h3>
  {mostRecentArticles.length === 0 && <p>No recent articles to show.</p>}
  {
    mostRecentArticles.length > 0 && (
      <ul>
        {mostRecentArticles.map((article) => (
          <li>
            <a href={`/articles/${article.id}`}>{article.title}</a>
            <a
              href={article.url}
              target="_blank"
              class="button"
              style="margin-left: 0.5rem; font-weight: normal"
            >
              Open ↗
            </a>
          </li>
        ))}
      </ul>
    )
  }
  <div class="actions-group">
    <a href="/articles/" class="button">💬 See all articles</a>
    <a href="/articles/new" class="button">➕ Add a new article</a>
  </div>

  <h3>🎵 Music items</h3>
  {mostRecentMusicItems.length === 0 && <p>No recent music items to show.</p>}
  {
    mostRecentMusicItems.length > 0 && (
      <ul>
        {mostRecentMusicItems.map((musicItem) => (
          <li>
            <a href={`/music-items/${musicItem.id}`}>{musicItem.title}</a>
            <a
              href={musicItem.url}
              target="_blank"
              class="button"
              style="margin-left: 0.5rem; font-weight: normal"
            >
              Open ↗
            </a>
          </li>
        ))}
      </ul>
    )
  }
  <p>
    <div class="actions-group">
      <a href="/music-items/" class="button">🎵 See all music items</a>
      <a href="/music-items/new" class="button">➕ Add a new music item</a>
    </div>

    <h3>📖 Sources</h3>
    {mostRecentSources.length === 0 && <p>No recent sources to show.</p>}

    <ul>
      {
        mostRecentSources.map((source) => (
          <li>
            <a href={`/sources/${source.id}`}>{source.title}</a>
            <a
              href={source.url}
              target="_blank"
              class="button"
              style="margin-left: 0.5rem; font-weight: normal"
            >
              Open ↗
            </a>
          </li>
        ))
      }
    </ul>
    <div class="actions-group">
      <a href="/sources/" class="button">📖 See all sources</a>
      <a href="/sources/new" class="button">➕ Add a new source</a>
    </div>
    <p>
      <h2>Feed</h2>

      <p>
        This section is a work in progress - once I build out the friendship +
        friend request + sharing functionality, this will be a feed of your
        friends' music discoveries / articles.
      </p>

      <TODO
        >currently this only has music items. Maybe it should also have
        articles?</TODO
      >

      <ul>
        {
          feedItems.map((feedItem) => (
            <li>
              <a href={feedItem.MusicItem.url}>{feedItem.MusicItem.title}</a>
              <br />
              {feedItem.MusicItem.note && (
                <span>{feedItem.MusicItem.note}</span>
              )}
              {feedItem.MusicItem.userId !== currentUser.id && (
                <form action="/music-items/new">
                  <input
                    type="hidden"
                    name="original-music-item-id"
                    value={feedItem.MusicItem.id}
                  />
                  <button>Save this music item</button>
                </form>
              )}
              <span>{formatDate(feedItem.MusicItem.createdAt)}</span>
              User: {feedItem.User.username}
              {feedItem.OriginalMusicItem && (
                <span>
                  (originally bookmarked by{" "}
                  <a href={`/user/${feedItem.OriginalMusicItemSaver.username}`}>
                    {feedItem.OriginalMusicItemSaver.username}
                  </a>
                  )
                </span>
              )}
            </li>
          ))
        }
      </ul>

      <Debug {feedItems} />

      <p>
        This is where your bookmarks and your friends' bookmarks will show up.
      </p>

      <h2>Friends</h2>
      <Debug {friendRequests} />

      <Debug {friends} />
    </p>
  </p>
</Layout>
