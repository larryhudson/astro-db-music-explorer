---
import Layout from "@src/components/Layout.astro";
import NextPrev from "@src/components/NextPrev.astro";
import TODO from "@src/components/TODO.astro";

import { db, Article, Source, eq, gt, lt, and, isNull, NOW } from "astro:db";
import { Debug } from "astro:components";

let statusMessage;

const currentUser = Astro.locals.user;

if (!currentUser) {
  return Astro.redirect("/auth/login/");
}

const sourceIdStr = Astro.params.sourceId;
const sourceId = parseInt(sourceIdStr, 10);

// Get all the source data for the current user in order
const userSources = await db
  .select()
  .from(Source)
  .where(eq(Source.userId, currentUser.id))
  .orderBy(Source.id);

// Find the index of the current source
const currentSourceIndex = userSources.findIndex(s => s.id === sourceId);
const currentSourceNum = currentSourceIndex + 1;
const source = userSources[currentSourceIndex];

if (!source) {
    return new Response("Could not find source", {status: 404});
}

const totalSources = userSources.length;

const prevSource = userSources[currentSourceIndex - 1] || null;
const nextSource = userSources[currentSourceIndex + 1] || null;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const formAction = formData.get("form-action");

  if (formAction === "delete") {
    await db.update(Article).set({sourceId: null}).where(
      and(
        eq(
          Article.sourceId, sourceId
        ),
        eq(
          Article.userId, currentUser.id
        )
      )
    );
    await db
      .delete(Source)
      .where(and(eq(Source.id, sourceId), eq(Source.userId, currentUser.id)));
    statusMessage = "Source deleted.";
    const redirectUrl = new URL("/sources/", Astro.url.origin);
    redirectUrl.searchParams.set("message", statusMessage);
    return Astro.redirect(redirectUrl);
  }
}

const relatedArticles = await db.select().from(Article).where(and(eq(Article.userId, currentUser.id), eq(Article.sourceId, source.id)));


const newArticleUrl = new URL("/articles/new", Astro.request.url);
newArticleUrl.searchParams.set("source-id", source.id);
newArticleUrl.searchParams.set("return-to-url", Astro.url.pathname);

const breadcrumbs = [{title: "ðŸ“– Sources", url: "/sources/"}]
---

<Layout title={source.title} {breadcrumbs}>
  {statusMessage && <p>{statusMessage}</p>}

  <NextPrev
    prev={prevSource && {url: `/sources/${prevSource.id}`, label: `Previous source: ${prevSource.title}`}}
    next={nextSource && {url: `/sources/${nextSource.id}`, label: `Next source: ${nextSource.title}`}}
    current={`Source ${currentSourceNum} of ${totalSources}`}
  />

  <TODO>You can't edit a source after you create it - eg. you can't rename / edit the URL / edit the note for a source after you create it. Need to implement that!</TODO>

  <TODO>We should be able to mark when we have last 'checked' the source, and it should save that, so that we know how long ago we last checked the source. That way, we're not checking the source over and over again. Eg. if you check a source once a day, there won't be much new. Maybe better to check once a week, for example.</TODO>

  <TODO>Move the code for 'actions' (eg. edit, delete) to this page, and then move the action buttons here</TODO>

  <p>
  <a href={source.url} target="_blank" class="button">Open {source.title} in new tab â†—</a>
    </p>

  <h2>Articles for this source</h2>

  <TODO>show more information about the articles, maybe in table view?</TODO>

{relatedArticles.length === 0 && (<p>No articles for this source yet.</p>)}

{relatedArticles.length > 0 && (
<ul>
{relatedArticles.map((article) => (
  <li><a href={`/articles/${article.id}`}>{article.title}</a></li>
))}
</ul>
)}

  <p><a class="button" href={newArticleUrl}>âž• Add new article for this source</a></p>

  <NextPrev
    prev={prevSource && {url: `/sources/${prevSource.id}`, label: `Previous source: ${prevSource.title}`}}
    next={nextSource && {url: `/sources/${nextSource.id}`, label: `Next source: ${nextSource.title}`}}
    current={`Source ${currentSourceNum} of ${totalSources}`}
  />

<Debug {source} />

</Layout>

<style>
  .next-prev {
    display: flex;
    justify-content: space-between;
  }

  .next-prev a {
    display: block;
    padding: 1rem;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    text-decoration: none;
      }
</style>
